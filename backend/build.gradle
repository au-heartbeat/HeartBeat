plugins {
  id 'java'
  id 'jacoco'
  id 'pmd'
  id 'checkstyle'
  id 'org.springframework.boot' version '3.0.3'
  id 'io.spring.dependency-management' version '1.1.0'
  id "io.spring.javaformat" version "0.0.38"
  id 'com.github.jk1.dependency-license-report' version '2.1'
}

group = 'com.tw'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '19'

repositories {
  mavenCentral()
}

configurations.configureEach {
  exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-log4j2'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.1'
  implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
  compileOnly 'org.projectlombok:lombok:1.18.26'
  annotationProcessor 'org.projectlombok:lombok:1.18.26'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
  testCompileOnly 'org.projectlombok:lombok:1.18.26'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
  finalizedBy jacocoTestReport
}

checkstyle {
  toolVersion = "10.7.0"
  configFile = file("src/main/resources/checkstyle.xml")
}

pmd {
  toolVersion = '6.54.0'
  ruleSets = ['java-basic']
  ruleSetConfig = resources.text.fromFile("src/main/resources/pmd.xml")
}

def testIgnoreList = [
  "**/HeartbeatApplication**",
]

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
    csv.required = true
  }
  classDirectories.setFrom(files(classDirectories.files.collect {
    fileTree(dir: it, exclude: testIgnoreList)
  }))
}
jacocoTestCoverageVerification {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: testIgnoreList)
    }))
  }
  violationRules {
    rule {
      limit {
        minimum = 1.0
      }
    }
  }
}

licenseReport {
  allowedLicensesFile = new File("src/main/resources/allowed-licenses.json")
}

