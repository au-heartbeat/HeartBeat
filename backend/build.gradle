plugins {
	id 'java'
	id 'jacoco'
  id 'pmd'
  id 'checkstyle'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
  id "io.spring.javaformat" version "0.0.35"
  id 'com.github.jk1.dependency-license-report' version '2.1'
}

group = 'com.tw'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '19'

repositories {
	mavenCentral()
}

configurations.all {
	exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
	implementation 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
}

tasks.named('test') {
	useJUnitPlatform()
  testLogging {
    events "started", "passed", "skipped", "failed"
  }
	finalizedBy jacocoTestReport
}

checkstyle {
  toolVersion = "10.7.0"
  configFile = file("src/main/resources/checkstyle.xml")
}

def testIgnoreList = [
  "**/HeartbeatApplication**",
]

jacocoTestReport {
	dependsOn test
  reports {
    html.enabled true
    xml.enabled true
  }
  classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: testIgnoreList)
    }))
}
jacocoTestCoverageVerification {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: testIgnoreList)
    }))
  }
  violationRules {
    rule {
      limit {
        minimum = 1
      }
    }
  }
}

licenseReport {
    allowedLicensesFile = new File("src/main/resources/allowed-licenses.json")
}

