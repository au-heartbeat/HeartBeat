Parameters:
  GitHubOrg:
    Type: String
  RepositoryName:
    Type: String
  OIDCProviderArn:
    Description: Arn for the GitHub OIDC Provider.
    Default: ""
    Type: String
  AwsAccountId:
    Description: "Account id, like: 123456789012"
    Default: ""
    Type: String
  AwsHost:
    Description: "Host of AWS resource, like: cn-north-1.amazonaws.com.cn"
    Default: ""
    Type: String
  AwsRegion:
    Description: AWS region
    Default: "cn-north-1"
    Type: String
  EC2ImageId:
    Description: AMI ID
    Default: "ami-0bf2183ba2c3b50f9"
    Type: String
  SSHPublicKey:
    Description: Public key to connect EC2
    Default: ""
    Type: String
  OIDCAudience:
    Description: Audience supplied to configure-aws-credentials.
    Default: "sts.amazonaws.com"
    Type: String

Conditions:
  CreateOIDCProvider: !Equals
    - !Ref OIDCProviderArn
    - ""

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DockerAuth
          PolicyDocument:
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"

  AWSGitHubActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !If
                - CreateOIDCProvider
                - !Ref GithubOidc
                - !Ref OIDCProviderArn
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: !Ref OIDCAudience
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${RepositoryName}:*
      Policies:
        - PolicyName: IAMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:GetRole
                Effect: Allow
                Resource: "*"
        - PolicyName: GitHubAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - cloudformation:CreateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ListStacks
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackEvents
                  - cloudformation:ValidateTemplate
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:GetTemplateSummary
                  - ec2:*
                Effect: Allow
                Resource: "*"

  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Condition: CreateOIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1
  EcrBackend:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "heartbeat_backend"
      LifecyclePolicy:
        LifecyclePolicyText: |
            {
                "rules": [
                    {
                        "rulePriority": 1,
                        "description": "Delete old images",
                        "selection": {
                            "tagStatus": "tagged",
                            "tagPrefixList": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
                            "countType": "imageCountMoreThan",
                            "countNumber": 2
                        },
                        "action": {
                            "type": "expire"
                        }
                    }
                ]
            }
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
  EcrMockServer:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "mock_server"
      LifecyclePolicy:
        LifecyclePolicyText: |
            {
                "rules": [
                    {
                        "rulePriority": 1,
                        "description": "Delete old images",
                        "selection": {
                            "tagStatus": "tagged",
                            "tagPrefixList": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
                            "countType": "imageCountMoreThan",
                            "countNumber": 2
                        },
                        "action": {
                            "type": "expire"
                        }
                    }
                ]
            }
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
  EcrFrontend:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "heartbeat_frontend"
      LifecyclePolicy:
        LifecyclePolicyText: |
            {
                "rules": [
                    {
                        "rulePriority": 1,
                        "description": "Delete old images",
                        "selection": {
                            "tagStatus": "tagged",
                            "tagPrefixList": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
                            "countType": "imageCountMoreThan",
                            "countNumber": 2
                        },
                        "action": {
                            "type": "expire"
                        }
                    }
                ]
            }
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${EC2ImageId}
      InstanceType: "t2.micro"
      Tags:
        - Key: "Name"
          Value: "HeartBeatEC2"
        - Key: "app"
          Value: "HeartBeat"
        - Key: "env"
          Value: "SIT"
      SecurityGroups:
        - !Ref EC2SSHSecurityGroup
        - !Ref EC2AppSecurityGroup
        - !Ref EC2OldAppSecurityGroup
        - !Ref EC2Stubby4jGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      UserData:
        "Fn::Base64": !Sub |
          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]
          runcmd:
            - sudo yum -y install docker
            - sudo systemctl enable docker.service
            - sudo systemctl start docker.service
            - sudo chmod 666 /var/run/docker.sock
            - sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            - sudo chmod +x /usr/local/bin/docker-compose
            - sudo `aws ecr get-login-password --region ${AwsRegion} | docker login --username AWS --password-stdin ${AwsAccountId}.dkr.ecr.${AwsHost}`
  MockServerEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${EC2ImageId}
      InstanceType: "t2.micro"
      Tags:
        - Key: "Name"
          Value: "MockServerEC2"
        - Key: "app"
          Value: "MockServer"
        - Key: "env"
          Value: "E2E"
      SecurityGroups:
        - !Ref EC2SSHSecurityGroup
        - !Ref EC2Stubby4jGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      UserData:
        "Fn::Base64": !Sub |
          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]
          runcmd:
            - sudo yum -y install docker
            - sudo systemctl enable docker.service
            - sudo systemctl start docker.service
            - sudo chmod 666 /var/run/docker.sock
            - sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            - sudo chmod +x /usr/local/bin/docker-compose
            - sudo `aws ecr get-login-password --region ${AwsRegion} | docker login --username AWS --password-stdin ${AwsAccountId}.dkr.ecr.${AwsHost}`
  E2EEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${EC2ImageId}
      InstanceType: "t2.micro"
      Tags:
        - Key: "Name"
          Value: "HeartBeatE2EEC2"
        - Key: "app"
          Value: "HeartBeatE2E"
        - Key: "env"
          Value: "E2E"
      SecurityGroups:
        - !Ref EC2SSHSecurityGroup
        - !Ref EC2AppSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      UserData:
        "Fn::Base64": !Sub |
          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]
          runcmd:
            - sudo yum -y install docker
            - sudo systemctl enable docker.service
            - sudo systemctl start docker.service
            - sudo chmod 666 /var/run/docker.sock
            - sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            - sudo chmod +x /usr/local/bin/docker-compose
            - sudo `aws ecr get-login-password --region ${AwsRegion} | docker login --username AWS --password-stdin ${AwsAccountId}.dkr.ecr.${AwsHost}`

  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: HeartBeatKeyPair
      PublicKeyMaterial: !Ref SSHPublicKey
  EC2SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
  EC2OldAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access application
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
  EC2AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access application
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 4321
        ToPort: 4321
        CidrIp: 0.0.0.0/0
  EC2Stubby4jGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Stub mock server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4323
          ToPort: 4323
          CidrIp: 0.0.0.0/0

  WebPortAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance
      Domain: vpc
  MockServerPortAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MockServerEC2Instance
      Domain: vpc
  E2EWebPortAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref E2EEC2Instance
      Domain: vpc
Outputs:
  Role:
    Value: !GetAtt AWSGitHubActionRole.Arn
  EIP:
    Value: !GetAtt WebPortAddress.PublicIp
  MockServerEIP:
    Value: !GetAtt MockServerPortAddress.PublicIp
  E2EEIP:
    Value: !GetAtt E2EWebPortAddress.PublicIp

